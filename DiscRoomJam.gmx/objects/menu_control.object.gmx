<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keybinding = false;
active = true;

draw_set_font(global.font);
text_color = global.grey;

select_index = 0;
menu_scripts = ds_list_create();

menu_texts = ds_list_create();

last_menu = ds_stack_create();

menu_name = "void";

menu_main();

snazzy_released = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(menu_name != "Controls")
{
    if(keyboard_check_pressed(keybinds_control.control_down))
    {
        select_index = (select_index + 1) mod ds_list_size(menu_texts);
    }
    else if(keyboard_check_pressed(keybinds_control.control_up))
    {
        select_index = (select_index - 1 + ds_list_size(menu_texts)) mod ds_list_size(menu_texts);
    }
    else if(keyboard_check_pressed(keybinds_control.control_fire2))
    {
        if(ds_stack_empty(last_menu))
        {
            menu_main();
        }
        else
        {
            script_execute(ds_stack_pop(last_menu));
        }
    }
    else if(keyboard_check_pressed(keybinds_control.control_fire1))
    {
        script_execute(menu_scripts[|select_index]);
        snazzy_released = false;
    }
}
else
{
    if(!keybinding)
    {
        if(keyboard_check_pressed(keybinds_control.control_down))
        {
            select_index = (select_index + 1) mod ds_list_size(menu_texts);
        }
        else if(keyboard_check_pressed(keybinds_control.control_up))
        {
            select_index = (select_index - 1 + ds_list_size(menu_texts)) mod ds_list_size(menu_texts);
        }
        else if(keyboard_check_pressed(keybinds_control.control_fire2))
        {
            if(ds_stack_empty(last_menu))
            {
                menu_main();
            }
            else
            {
                script_execute(ds_stack_pop(last_menu));
            }
        }
        else if(keyboard_check_released(keybinds_control.control_fire1) &amp;&amp; snazzy_released)
        {
            script_execute(menu_scripts[|select_index]);
        }
        else if(!snazzy_released &amp;&amp; keyboard_check_released(keybinds_control.control_fire1))
        {
            snazzy_released = true;
        }
    }
    else
    {
        if(keyval_to_string(keyboard_lastkey) != "ERROR" &amp;&amp; keyboard_check_released(keyboard_lastkey))
        {
            key_rebind(select_index,keyboard_lastkey);
            keybinding = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(text_color);

if(menu_name != "Controls"){
    if(menu_name != ""){
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        draw_text(2,288-3,"[" + menu_name + "]");
    }
    
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    
    for(var i = 0; i &lt; ds_list_size(menu_texts); i = i + 1)
    {
        if(select_index == i)
        {
            draw_text(56,78 + 20*i,"&gt;" + menu_texts[|i] + "&lt;");
        }
        else
        {
            draw_text(56,78 + 20*i,menu_texts[|i]);
        }
    }
}
else
{

    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    draw_text(2,288-3,"[Controls]");
        
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    
    for(var i = 0; i &lt; ds_list_size(menu_texts); i = i + 1)
    {
        if(select_index == i)
        {
            if(keybinding)
            {
                draw_text(10,78 + 20*i,menu_texts[|i] + " - &lt;key&gt;");
            }
            else
            {
                draw_text(2,78 + 20*i,"&gt;" + menu_texts[|i] + " - " + keyval_to_string(index_controls(i)));
            }
            
        }
        else
        {
            draw_text(10,78 + 20*i,menu_texts[|i] + " - " + keyval_to_string(index_controls(i)));
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
