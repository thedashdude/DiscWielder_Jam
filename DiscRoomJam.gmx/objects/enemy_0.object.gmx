<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>enemy_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = true

on_screen = false

bullet_on = false
bullet_cooldown = 0
bullet_cooldown_max = 60

move_on = false
move_cooldown = 0
move_cooldown_max = 120
move_dir = 0

move_deacc_threshhold = 40
move_stop_threshhold = 80



move_spd_max = 1
move_spd_min = 0.5
move_spd_now = 1

sprite_left = 12
sprite_right = 12
sprite_up = 12
sprite_down = 12


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(active){
    if(!on_screen)
    {
        if(y&lt; level_control_obj.room_upmost/2 + level_control_obj.room_downmost/2 ){
            y = y + 2
        }
        else
        {
            y = y - 2
        }
        if(x - sprite_left &gt;= level_control_obj.room_leftmost &amp;&amp; x + sprite_right &lt;= level_control_obj.room_rightmost)
        {
            if(y - sprite_up &gt;= level_control_obj.room_upmost &amp;&amp; y + sprite_down &lt;= level_control_obj.room_downmost)
            {
                on_screen = true
            }
        }
    }
    else
    {
        //x = 0
        /*-1,-1
        1,-1
        -1,0
        1,0
        0,1
        */
        
        
        //Increment Counters
        if(!move_on)
        {
            move_cooldown = move_cooldown + 1
            if(move_cooldown &gt;= move_cooldown_max)
            {
                move_on = true
                move_cooldown = 0
            }
        }
        if(!bullet_on)
        {
            bullet_cooldown = bullet_cooldown + 1
            if(bullet_cooldown &gt;= bullet_cooldown_max)
            {
                bullet_on = true
                bullet_cooldown = 0
            }
        }
        
        
        //Reset Counters
        
        if(move_cooldown &gt; move_deacc_threshhold)
        {
            move_spd_now = move_spd_min
        }
        if(move_cooldown &gt; move_stop_threshhold)
        {
            move_spd_now = 0
        }
        
        if(bullet_on)
        {
            bullet_on = false
            bullet_script_0()
        }
        if(move_on)
        {
            move_on = false
            deacc = false
            move_spd_now = move_spd_max
            move_dir = irandom_range(0,4)
        }
        
        //Move
        if(move_dir == 0)
        {
            x = x - move_spd_now
            y = y - move_spd_now
        }
        else if(move_dir == 1)
        {
            x = x + move_spd_now
            y = y - move_spd_now
        }
        else if(move_dir == 2)
        {
            x = x - move_spd_now
        }
        else if(move_dir == 3)
        {
            x = x + move_spd_now
        }
        else if(move_dir == 4)
        {
            y = y + move_spd_now
        }
        
        
    
    
    
    
        var tx = x
        var ty = y
        x = clamp(x, level_control_obj.room_leftmost + sprite_left,level_control_obj.room_rightmost - sprite_right)
        y = clamp(y, level_control_obj.room_upmost + sprite_up,level_control_obj.room_downmost - sprite_down)
        
        if(tx != x || ty != y)
        {
            move_dir = irandom_range(0,4)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tx = x
var ty = y
x = round(x)
y = round(y)

draw_self()

x = tx
y = ty
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
